CONST CHAR const_char_a 'a'
CONST CHAR const_char_b 'b'
CONST CHAR const_char_c 'c'
CONST CHAR const_char_A 'A'
CONST INT const_int_postive 1
CONST INT const_int_zero 0
CONST INT const_int_negtive -1
CONST CHAR const_char_num '9'
CONST CHAR const_char_underline '_'
CONST CHAR const_char_add '+'
CONST CHAR const_char_mul '*'
INT int_global_var
CHAR char_global_var
INT sort[10]
GOTO main
SET FUNC_testIfWhile
test_if_result = 0
loop_num = 0
#2 = 99 > 98
BNZ #2 $LABEL0
#3 = test_if_result < 100
BNZ #3 $LABEL2
SET $LABEL4
test_if_result = test_if_result + loop_num
loop_num = loop_num + 1
#6 = test_if_result < 100
BEZ #6 $LABEL4
SET $LABEL2
#7 = test_if_result - 100
#8 = #7 * 3
#9 = #8 == 15
BNZ #9 $LABEL5
#10 = test_if_result * 10
#11 = 0 - #10
#12 = 2 * loop_num
#13 = #11 + #12
#14 = #13 + 117
test_if_result = #14 - 98
#16 = 0 + loop_num
#17 = #16 - test_if_result
#19 = #17 + 970
#20 = #19 - 100
#21 = #20 + 42
#22 = #21 + 34
#23 = 2 * test_if_result
loop_num = #22 + #23
GOTO $LABEL6
SET $LABEL5
#25 = test_if_result * 4
#26 = 0 + #25
#27 = 5 * loop_num
#28 = #26 + #27
#29 = #28 + 24
#30 = #29 - 97
test_if_result = #30 + 99
#32 = 0 - loop_num
#33 = #32 + test_if_result
#35 = #33 + 388
#36 = #35 - 1653
#37 = #36 + 453
#38 = #37 + 555
#39 = 4 * test_if_result
loop_num = #38 - #39
SET $LABEL6
SET $LABEL0
OUTV test_if_result
OUTV loop_num
test_if_result = 0
loop_num = 0
#43 = 99 >= 98
BNZ #43 $LABEL7
#44 = test_if_result < 10
BNZ #44 $LABEL9
SET $LABEL11
#45 = loop_num > 2
BNZ #45 $LABEL12
test_if_result = test_if_result + loop_num
SET $LABEL12
loop_num = loop_num + 1
#48 = test_if_result / 2
#49 = #48 * 2
#50 = #49 == test_if_result
BNZ #50 $LABEL14
loop_num = loop_num + 1
SET $LABEL14
#52 = test_if_result < 10
BEZ #52 $LABEL11
SET $LABEL9
SET $LABEL7
OUTV test_if_result
OUTV loop_num
test_if_result = 0
loop_num = 0
#53 = 1 < 2
BNZ #53 $LABEL16
#54 = test_if_result < 20
BNZ #54 $LABEL18
SET $LABEL20
#55 = test_if_result / 2
#56 = #55 * 2
#57 = test_if_result - #56
#58 = #57 == 0
BNZ #58 $LABEL21
test_if_result = test_if_result + 1
GOTO $LABEL22
SET $LABEL21
#60 = test_if_result / 2
#61 = #60 * 2
#62 = test_if_result - #61
#63 = #62 == 1
BNZ #63 $LABEL23
test_if_result = test_if_result + loop_num
SET $LABEL23
SET $LABEL22
loop_num = loop_num + 1
#66 = test_if_result < 20
BEZ #66 $LABEL20
SET $LABEL18
#67 = test_if_result / 2
#68 = #67 * 2
#69 = test_if_result == #68
BNZ #69 $LABEL25
#70 = test_if_result * 7
#71 = 0 + #70
#72 = 2 * loop_num
#73 = #71 + #72
#74 = #73 + 99
#75 = #74 - 97
test_if_result = #75 + 103
#77 = 0 - loop_num
#78 = #77 + test_if_result
#80 = #78 + 194
#81 = #80 - 523
#82 = #81 + 53
#83 = #82 + 355
#84 = 2 * test_if_result
loop_num = #83 - #84
SET $LABEL25
SET $LABEL16
OUTV test_if_result
OUTV loop_num
#86 = 2 <= 1
BNZ #86 $LABEL27
OUTS 2 <= 1
SET $LABEL27
#87 = 1 == 2
BNZ #87 $LABEL29
OUTS 1 == 2
SET $LABEL29
test_if_result = 0
loop_num = 0
#88 = 1 != 2
BNZ #88 $LABEL31
#89 = loop_num * 2
#90 = test_if_result - #89
#91 = #90 == 0
BNZ #91 $LABEL33
#92 = test_if_result < 30
BNZ #92 $LABEL35
SET $LABEL37
#93 = test_if_result / 2
#94 = #93 * 2
#95 = #94 - test_if_result
#97 = #95 == -1
BNZ #97 $LABEL38
test_if_result = test_if_result + 1
GOTO $LABEL39
SET $LABEL38
#99 = test_if_result / 2
#100 = #99 * 2
#101 = #100 - test_if_result
#102 = #101 == 0
BNZ #102 $LABEL40
test_if_result = test_if_result + loop_num
SET $LABEL40
SET $LABEL39
loop_num = loop_num + 1
#105 = test_if_result < 30
BEZ #105 $LABEL37
SET $LABEL35
GOTO $LABEL34
SET $LABEL33
test_if_result = -1
loop_num = -1
SET $LABEL34
SET $LABEL31
OUTV test_if_result
OUTV loop_num
#109 = 0 != 0
BNZ #109 $LABEL42
OUTS 1 - 1 = true
SET $LABEL42
int_global_var = -1
char_global_var = 97
RET #
SET FUNC_returnInt
RET 10
SET FUNC_returnChar
RET 114
SET FUNC_returnIntParameter
#0 = select == 1
BNZ #0 $LABEL44
_tmp = int_parameter_1
GOTO $LABEL47
SET $LABEL44
#1 = select == 2
BNZ #1 $LABEL46
_tmp = int_parameter_2
GOTO $LABEL47
SET $LABEL46
#2 = select == 3
BNZ #2 $LABEL48
_tmp = int_parameter_3
GOTO $LABEL51
SET $LABEL48
#3 = select == 4
BNZ #3 $LABEL50
_tmp = int_parameter_4
GOTO $LABEL51
SET $LABEL50
_tmp = 0
SET $LABEL51
SET $LABEL47
RET _tmp
SET FUNC_returnCharParameter
#0 = select == 1
BNZ #0 $LABEL52
RET char_parameter_1
SET $LABEL52
#1 = select == 2
BNZ #1 $LABEL54
RET char_parameter_2
SET $LABEL54
#2 = select == 3
BNZ #2 $LABEL56
RET char_parameter_3
SET $LABEL56
#3 = select == 4
BNZ #3 $LABEL58
RET char_parameter_4
SET $LABEL58
RET 48
SET $LABEL59
SET $LABEL55
RET 0
SET FUNC_testAssign
CALL FUNC_returnChar
#8 = #RET
#9 = #8 - 97
PUSH 2
PUSH 1
PUSH -2
PUSH 10
PUSH #9
CALL FUNC_returnIntParameter
#11 = #RET
#12 = #11 * 2
#14 = #12 / 2
int_test_assign = 10 + #14
#16 = int_test_assign / 4
#17 = #16 + 97
#18 = #17 - 97
#19 = #18 - 2
int_array_test_assign[#19] = 2
#23 = int_array_test_assign[0]
#22 = int_test_assign / #23
#24 = -2 + #22
CALL FUNC_returnInt
#25 = #RET
#26 = #24 + #25
#27 = #26 - 11
CALL FUNC_returnInt
#28 = #RET
#29 = 0 - #28
CALL FUNC_returnChar
#31 = #RET
#32 = #31 - 97
#30 = 10 * #32
CALL FUNC_returnInt
#37 = #RET
PUSH 4
PUSH 1
PUSH #37
PUSH 10
PUSH 97
CALL FUNC_returnIntParameter
#41 = #RET
#42 = #30 + #41
#43 = #29 + #42
int_array_test_assign[#27] = #43
#45 = int_array_test_assign[1]
#46 = -255 + #45
#48 = #46 + 196
#49 = #48 - 196
int_array_test_assign[#49] = 1
CALL FUNC_returnChar
#52 = #RET
char_test_assign = #52
CALL FUNC_returnChar
#55 = #RET
CALL FUNC_returnChar
#57 = #RET
PUSH 4
PUSH 97
PUSH #55
PUSH #57
PUSH 97
CALL FUNC_returnCharParameter
#60 = #RET
char_array_test_assign[0] = #60
#61 = char_array_test_assign[0]
char_array_test_assign[1] = #61
char_array_test_assign[2] = 120
OUTV int_test_assign
#62 = int_array_test_assign[0]
OUTV #62
#63 = int_array_test_assign[1]
OUTV #63
#64 = int_array_test_assign[2]
OUTV #64
OUTC char_test_assign
OUTC #61
#66 = char_array_test_assign[1]
OUTC #66
#67 = char_array_test_assign[2]
OUTC #67
int_global_var = -3
char_global_var = 99
RET #
SET FUNC_testInputOutput
INV int_test_input
INC char_test_input
OUTS  !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
OUTS int_test_input = 
OUTV int_test_input
OUTS char_test_input = 
OUTC char_test_input
RET #
SET FUNC_testTrick
RET #
SET FUNC_judge1
ret = 0
#0 = a < b
BNZ #0 $LABEL60
#1 = c >= d
BNZ #1 $LABEL62
ret = 1
SET $LABEL62
SET $LABEL60
RET ret
SET FUNC_judge2
ret = 0
#0 = a < b
BNZ #0 $LABEL64
#1 = c <= d
BNZ #1 $LABEL66
ret = 1
SET $LABEL66
SET $LABEL64
RET ret
SET FUNC_Qsort
first = low
last = high
#0 = sort[first]
key = #0
#1 = low >= high
BNZ #1 $LABEL68
RET #
SET $LABEL68
#2 = first < last
BNZ #2 $LABEL70
SET $LABEL72
#5 = sort[last]
PUSH first
PUSH last
PUSH #5
PUSH key
CALL FUNC_judge1
#8 = #RET
#9 = #8 == 1
BNZ #9 $LABEL73
SET $LABEL75
last = last - 1
#13 = sort[last]
PUSH first
PUSH last
PUSH #13
PUSH key
CALL FUNC_judge1
#16 = #RET
#17 = #16 == 1
BEZ #17 $LABEL75
SET $LABEL73
#18 = sort[last]
sort[first] = #18
#21 = sort[first]
PUSH first
PUSH last
PUSH #21
PUSH key
CALL FUNC_judge2
#24 = #RET
#25 = #24 == 1
BNZ #25 $LABEL76
SET $LABEL78
first = first + 1
#29 = sort[last]
PUSH first
PUSH last
PUSH #29
PUSH key
CALL FUNC_judge1
#32 = #RET
#33 = #32 == 1
BEZ #33 $LABEL78
SET $LABEL76
#34 = sort[first]
sort[last] = #34
#35 = first < last
BEZ #35 $LABEL72
SET $LABEL70
sort[first] = key
#37 = first - 1
PUSH low
PUSH #37
CALL FUNC_Qsort
#39 = first + 1
PUSH #39
PUSH high
CALL FUNC_Qsort
RET #
SET FUNC_testRecursion
sort[0] = 5
sort[1] = 8
sort[2] = 3
sort[3] = 6
sort[4] = 4
sort[5] = 1
sort[6] = 2
sort[7] = 7
PUSH 0
PUSH 7
CALL FUNC_Qsort
i = 0
#2 = i < 8
BNZ #2 $LABEL79
SET $LABEL81
#3 = sort[i]
OUTV #3
i = i + 1
#5 = i < 8
BEZ #5 $LABEL81
SET $LABEL79
int_global_var = -5
char_global_var = 101
RET #
SET FUNC_testCallFunction
INV test_select
#0 = test_select == 0
BNZ #0 $LABEL82
CALL FUNC_testIfWhile
GOTO $LABEL85
SET $LABEL82
#1 = test_select == 1
BNZ #1 $LABEL84
GOTO $LABEL85
SET $LABEL84
#2 = test_select == 2
BNZ #2 $LABEL86
CALL FUNC_testAssign
GOTO $LABEL89
SET $LABEL86
#3 = test_select == 3
BNZ #3 $LABEL88
CALL FUNC_testInputOutput
GOTO $LABEL89
SET $LABEL88
#4 = test_select == 4
BNZ #4 $LABEL90
CALL FUNC_testRecursion
SET $LABEL90
SET $LABEL89
SET $LABEL85
#5 = int_global_var
OUTV #5
#6 = char_global_var
OUTC #6
RET #
FUNC main
int_global_var = 0
char_global_var = 95
CALL FUNC_testCallFunction
CALL FUNC_testTrick
EXIT
